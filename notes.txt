app-User
    - Abstract user
    - mobile
    - user_type
    
   -Address
    - user (fk)
    - state
    - city
    - area
    - zipcode
    - landmark
    - category (home or work) 
    
app-Restaurant
    - user (fk)
    - name 
    - city
    - address
    - mobile
    - is_varified
    - veg_or_nonveg 
    - no_of_chefs
    - start_date 
    - img1
    - img2
    - img3
    - img4
    
   -Cuisine
    - restaurant (fk)
    - cuisine
    
app-Menu
    - restaurant (fk)
    - name 
    - desp..
    - type
    - price
    - img1 
    
   -Review
    - user (fk)
    - menu (fk)
    - rating 
    - description
    - date (optional)
    
app-Bag 
    - User (one-to-one) 

   -BagItem 
    - bag (fk) 
    - item (Menu --> fk) 
    - quantity 
    
==================================
    
app-Order
    - order_id
    - restaurant (fk)
    - is_confirmed
    - estimated_time
    - driver (fk)
    
   -OrderItem
    - item (fk -- menu)
    - order (fk)
    - quantity 
    
app-Driver
    - User (fk)
    - is_varified     


==========================================

Task Name :- FoodTank Website (Django) / PHP
Time sheet filled : Yes

Work Done Today:-
    1. Django
        - Write order placed logic
        - Create order info page
        - Use AJAX in profile update
        - Done some task in admin dashboard
        - Learn DOM Traversal in jQuery.

Day Start Time: 12:05
Day End Time:  8:15 





========= code for place order =============
from django.shortcuts import redirect
from .models import BagItem, Order, OrderItem

def place_order(request):
    # Retrieve the current user's bag items
    user_bag_items = BagItem.objects.filter(bag__user=request.user)

    # Assuming the bag has items
    if user_bag_items.exists():
        # Assuming the bag items are associated with the same restaurant
        restaurant = user_bag_items.first().item.restaurant

        # Create an order associated with the restaurant
        order = Order.objects.create(
            restaurant=restaurant,
            is_confirmed=False,  # Set according to your logic
            estimated_time="Some estimation",  # Set according to your logic
            user=request.user  # Link the order to the current user
        )

        # Create order items linked to the created order
        for bag_item in user_bag_items:
            OrderItem.objects.create(
                order=order,
                item=bag_item.item,
                quantity=bag_item.quantity
            )

        # Clear the user's bag after placing the order
        user_bag_items.delete()

        # Redirect to a success page or a confirmation page
        return redirect('order-success')  # Redirect to a success page

    # Redirect to a page indicating no items in the bag
    return redirect('empty-bag')
================== end code =================

Today changes files are
    - basket.html
    - restaurant_info.html
    - app -> bag -> view